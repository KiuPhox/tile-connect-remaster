var g=Object.defineProperty;var S=(o,a,c)=>a in o?g(o,a,{enumerable:!0,configurable:!0,writable:!0,value:c}):o[a]=c;var h=(o,a)=>g(o,"name",{value:a,configurable:!0});var i=(o,a,c)=>S(o,typeof a!="symbol"?a+"":a,c);System.register(["./core.js"],function(o,a){"use strict";var c,d;return{setters:[p=>{c=p.P,d=p.C}],execute:h(function(){const l=class l{constructor(e,t){i(this,"options");i(this,"performance");i(this,"isRunning",!1);i(this,"checkTimer");i(this,"fpsHistory");i(this,"actualFPS",0);i(this,"start",h(()=>{this.isRunning||(this.isRunning=!0,this.checkTimer=this.options.CheckInterval,this.fpsHistory=[])},"start"));i(this,"stop",h(()=>{this.isRunning&&(this.isRunning=!1,this.options.OnlyUpdateWhenSwitchScene&&this.checkFps())},"stop"));i(this,"postStep",h(e=>{this.isRunning&&(this.checkTimer-=e,!(this.checkTimer>0)&&(this.checkTimer+=this.options.CheckInterval,this.fpsHistory.push(this.actualFPS),this.options.OnlyUpdateWhenSwitchScene||this.fpsHistory.length>=5&&this.checkFps()))},"postStep"));this.options=t,this.performance=e}checkFps(){if(this.fpsHistory.length===0)return;let e=!1;this.options.AutoUpgradeQuality&&this.isHighFps()&&(e=this.performance.upgradeGraphicsQuality()),this.isLowFps()&&(e=this.performance.downgradeGraphicsQuality()),e&&(this.fpsHistory=[])}getFpsMedian(){return this.getMedian(this.fpsHistory)}getMedian(e){if(e.length===0)return Number.NaN;const t=e.sort((r,n)=>r-n),s=Math.floor(t.length/2);return t.length%2===0?(t[s-1]+t[s])/2:t[s]}isLowFps(){return this.getFpsMedian()<this.options.FpsThreshold}isHighFps(){return this.getFpsMedian()>this.options.FpsThreshold*1.2}};h(l,"FpsTracker");let p=l;const f=class f extends c.Plugins.BasePlugin{constructor(){super(...arguments);i(this,"enabled",!1);i(this,"quality");i(this,"fpsTracker");i(this,"pixelRatio");i(this,"trackingSceneNames",[]);i(this,"trackingScene",h(t=>{if(this.trackingSceneNames.indexOf(t)<0){console.warn(`ðŸš« Adaptive performance: ${t} is not configured`);return}this.stopFPSTracker(),this.startFPSTracker(),console.info(`ðŸ“ˆ Adaptive performance: tracking ${t}`)},"trackingScene"));i(this,"startFPSTracker",h(()=>{this.fpsTracker.start()},"startFPSTracker"));i(this,"stopFPSTracker",h(()=>{this.fpsTracker.stop()},"stopFPSTracker"))}configure(t){const{Enabled:s,Quality:r,Options:n,TrackingSceneNames:y}=t;this.enabled=s,this.quality=r,this.pixelRatio=window.devicePixelRatio,this.trackingSceneNames=y,this.createFPSTracker(n)}getCurrentQuality(){return this.pixelRatio}downgradeGraphicsQuality(){const{Min:t,AdjustStep:s}=this.quality,r=this.pixelRatio;if(r<=t)return!1;const n=+(r-s).toFixed(2);return n<t?!1:(this.pixelRatio=n,this.resizeGameWorld(this.pixelRatio),console.warn(`ðŸ’« Graphics quality was downgraded! (${r} -> ${n})`),!0)}upgradeGraphicsQuality(){const{Max:t,AdjustStep:s}=this.quality,r=this.pixelRatio;if(r>=t)return!1;const n=+(r+s).toFixed(2);return n>t?!1:(this.pixelRatio=n,this.resizeGameWorld(this.pixelRatio),console.warn(`ðŸš€ Graphics quality was upgraded! (${r} -> ${n})`),!0)}createFPSTracker(t){this.fpsTracker=new p(this,t)}get event(){return this.game.event}resizeGameWorld(t){const s={forcePixelRatio:t};this.event.emit(d.REQUEST_RESIZE_GAME,s)}updatePostStepDeltaTime(t){this.fpsTracker.postStep(t)}updateActualFPS(t){this.fpsTracker.actualFPS=t}};h(f,"AdaptivePerformancePlugin");let u=f;o("default",u)},"execute")}});
