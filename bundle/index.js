var u=Object.defineProperty;var d=(o,i,t)=>i in o?u(o,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[i]=t;var a=(o,i)=>u(o,"name",{value:i,configurable:!0});var e=(o,i,t)=>d(o,typeof i!="symbol"?i+"":i,t);import{P as g,C as y}from"./core.js";const p=class p{constructor(i,t){e(this,"options");e(this,"performance");e(this,"isRunning",!1);e(this,"checkTimer");e(this,"fpsHistory");e(this,"actualFPS",0);e(this,"start",a(()=>{this.isRunning||(this.isRunning=!0,this.checkTimer=this.options.CheckInterval,this.fpsHistory=[])},"start"));e(this,"stop",a(()=>{this.isRunning&&(this.isRunning=!1,this.options.OnlyUpdateWhenSwitchScene&&this.checkFps())},"stop"));e(this,"postStep",a(i=>{this.isRunning&&(this.checkTimer-=i,!(this.checkTimer>0)&&(this.checkTimer+=this.options.CheckInterval,this.fpsHistory.push(this.actualFPS),this.options.OnlyUpdateWhenSwitchScene||this.fpsHistory.length>=5&&this.checkFps()))},"postStep"));this.options=t,this.performance=i}checkFps(){if(this.fpsHistory.length===0)return;let i=!1;this.options.AutoUpgradeQuality&&this.isHighFps()&&(i=this.performance.upgradeGraphicsQuality()),this.isLowFps()&&(i=this.performance.downgradeGraphicsQuality()),i&&(this.fpsHistory=[])}getFpsMedian(){return this.getMedian(this.fpsHistory)}getMedian(i){if(i.length===0)return NaN;const t=i.sort((r,n)=>r-n),s=Math.floor(t.length/2);return t.length%2===0?(t[s-1]+t[s])/2:t[s]}isLowFps(){return this.getFpsMedian()<this.options.FpsThreshold}isHighFps(){return this.getFpsMedian()>this.options.FpsThreshold*1.2}};a(p,"FpsTracker");let h=p;const l=class l extends g.Plugins.BasePlugin{constructor(){super(...arguments);e(this,"enabled",!1);e(this,"quality");e(this,"fpsTracker");e(this,"pixelRatio");e(this,"trackingSceneNames",[]);e(this,"trackingScene",a(t=>{if(this.trackingSceneNames.indexOf(t)<0){console.warn(`ðŸš« Adaptive performance: ${t} is not configured`);return}this.stopFPSTracker(),this.startFPSTracker(),console.info(`ðŸ“ˆ Adaptive performance: tracking ${t}`)},"trackingScene"));e(this,"startFPSTracker",a(()=>{this.fpsTracker.start()},"startFPSTracker"));e(this,"stopFPSTracker",a(()=>{this.fpsTracker.stop()},"stopFPSTracker"))}configure(t){const{Enabled:s,Quality:r,Options:n,TrackingSceneNames:f}=t;this.enabled=s,this.quality=r,this.pixelRatio=window.devicePixelRatio,this.trackingSceneNames=f,this.createFPSTracker(n)}getCurrentQuality(){return this.pixelRatio}downgradeGraphicsQuality(){const{Min:t,AdjustStep:s}=this.quality,r=this.pixelRatio;if(r<=t)return!1;const n=+(r-s).toFixed(2);return n<t?!1:(this.pixelRatio=n,this.resizeGameWorld(this.pixelRatio),console.warn(`ðŸ’« Graphics quality was downgraded! (${r} -> ${n})`),!0)}upgradeGraphicsQuality(){const{Max:t,AdjustStep:s}=this.quality,r=this.pixelRatio;if(r>=t)return!1;const n=+(r+s).toFixed(2);return n>t?!1:(this.pixelRatio=n,this.resizeGameWorld(this.pixelRatio),console.warn(`ðŸš€ Graphics quality was upgraded! (${r} -> ${n})`),!0)}createFPSTracker(t){this.fpsTracker=new h(this,t)}get event(){return this.game.event}resizeGameWorld(t){const s={forcePixelRatio:t};this.event.emit(y.REQUEST_RESIZE_GAME,s)}updatePostStepDeltaTime(t){this.fpsTracker.postStep(t)}updateActualFPS(t){this.fpsTracker.actualFPS=t}};a(l,"AdaptivePerformancePlugin");let c=l;const F=c;export{F as default};
